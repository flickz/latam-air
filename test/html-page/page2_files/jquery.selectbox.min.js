(function($) {
	$.extend($.fn, {
		selectBox : (function(){
			var typeTimer, typeSearch = '';

			var currentOpenedSelect;

			/**
			 * Gets random string with 'n' characters
			 */
			var randomString = function(n){
			    var s= '';
			    var randomchar=function(){
			    	var n= Math.floor(Math.random()*62);
			    	if(n<10) return n; //1-10
			    	if(n<36) return String.fromCharCode(n+55); //A-Z
			    	return String.fromCharCode(n+61); //a-z
			    }
			    while(s.length< n) s+= randomchar();
			    return s;
			}

			var keepOptionInView = function (select, li, center) {
                if (!li || li.length === 0) return;
                select = $(select);
                var control = select.selectBox('control'),
                    options = select.selectBox('options'),
                    scrollBox = select.selectBox('options'),
                    top = parseInt(li.offset().top - scrollBox.position().top),
                    bottom = parseInt(top + li.outerHeight());
                if (center) {
                    scrollBox.scrollTop(li.offset().top - scrollBox.offset().top + scrollBox.scrollTop() - (scrollBox.height() / 2))
                } else {
                    if (top < 0) {
                        scrollBox.scrollTop(li.offset().top - scrollBox.offset().top + scrollBox.scrollTop())
                    }
                    if (bottom > scrollBox.height()) {
                        scrollBox.scrollTop((li.offset().top + li.outerHeight()) - scrollBox.offset().top + scrollBox.scrollTop() - scrollBox.height())
                    }
                }
            };

            var escapeRegEx = function(text) {
        	  return text.replace(/[-[\]{}()*+?.,\\^$|#\s]/g, "\\$&");
        	};

			/**
			 * Private method to open options in generated selectbox
			 */
			var openOptions = function(select){

				if (select.is("[disabled]")){
					return false;
				}

				//hide all other selected options
				$(".selectBox-dropdown-menu").hide();

				//if options have been generated once show them, otherwise generate
				var optId = "opt-" + select.data("selectId");
				if ($("#"+optId).length > 0){
					options = $("#"+optId);

					var id = select.data("selectId");
					var genSelect = $("#"+id);

					/**
					 * Hack to has minimum the width of the parents span
					 */
					var selectWidth = select.innerWidth();
					var optionWidth;
					if(genSelect.innerWidth() > selectWidth ) {
						optionWidth = select.parents("span").innerWidth() ;
					}else {
						optionWidth = selectWidth;
					}

					/**
					 * Hack to have the selectbox opening in the right order
					 */
					var topSelect = genSelect.offset().top  + genSelect.outerHeight();

					if( $(window).height() + $(window).scrollTop() - (topSelect + options.outerHeight()) < 0){
						topSelect = genSelect.offset().top - options.outerHeight();
					}
					options.width(optionWidth).css({
	                    top: topSelect,
	                    left: genSelect.offset().left
	                });
					options.show();
					keepOptionInView(select, $("#"+optId).find("li.selectBox-selected"), true);
				}else{
					//generate new options for select - regexp incredible fast
					var optionsString = $.trim(select.html());

					optionsString = optionsString.replace(/<(\s)*option/gim, '<li');
					optionsString = optionsString.replace(/option(\s)*>/gim, 'li>');
					optionsString = optionsString.replace(/>([^<>]+)<\//gim, '><a>$1</a></');
					var val = select.val();

					//set current selected value
					var regExVal = RegExp("(value\\s*=\\s*['\"]"+escapeRegEx(val)+"\\s*['\"])", "im");
					var regExpInside =  RegExp("(><a>"+escapeRegEx(val)+"</a)", "im");

					if (regExVal.test(optionsString)){
						optionsString = optionsString.replace(regExVal, '$1 data-selected="true"');
					}else if(regExpInside.test(optionsString)){
						optionsString = optionsString.replace(regExpInside, ' data-selected="true"$1');
					}

					//inform about option value
					var regExVal = RegExp("(value\\s*=\\s*['\"]?([^'\"<>]+)\\s*['\"]?)([\\s>]{1})", "gim");
					var regExpInside =  RegExp("(><a>([^<>]+)</a)", "gim");
					if (regExVal.test(optionsString)){
						optionsString = optionsString.replace(regExVal, '$1 data-val="$2"$3');
					}else if(regExpInside.test(optionsString)){
						optionsString = optionsString.replace(regExpInside, ' data-val="$2"$1');
					}
					var options = $('<ul id="'+optId+'" class="selectBox-dropdown-menu selectBox-options" />').append(optionsString);
					if (typeof select.attr('class') !== 'undefined'){
					var classes = select.attr('class').split(" ");
						for (var i =0; i < classes.length - 1; i++){
							if (classes[i] != 'selectBox'){
								options.addClass(classes[i]+"-selectBox-dropdown-menu");
							}
						};
					}

					options.find('li[data-selected="true"]').addClass("selectBox-selected");

					var id = select.data("select-id");
					var genSelect = $("#"+id);


					options.find("li").on({
					  click: function(){
					    select.val($(this).attr("data-val")).trigger("selectBox-change", $(this));
					    closeOptions(options);
					  },
					  mouseenter: function(){
					    $(this).addClass("selectBox-hover");
					  },
					  mouseleave: function(){
					    $(this).removeClass("selectBox-hover");
					  }
					});

					options.hide().appendTo("body");

					/**
					 * Hack to has minimum the width of the parents span
					 */
					var selectWidth = select.innerWidth();
					var optionWidth;
					if(genSelect.innerWidth() > selectWidth ) {
						optionWidth = genSelect.innerWidth();
					}else {
						optionWidth = selectWidth;
					}

					/**
					 * Hack to have the selectbox opening in the right order
					 */
					var topSelect = genSelect.offset().top  + genSelect.outerHeight();

					if( $(window).height() + $(window).scrollTop() - (topSelect + options.outerHeight()) < 0){
						topSelect = genSelect.offset().top - options.outerHeight();
					}
					options.width(optionWidth).css({
	                    top: topSelect,
	                    left: genSelect.offset().left
	                });
					options.show();
					keepOptionInView(select, $("#"+optId).find("li.selectBox-selected"), true);
				}

			}

			var closeOptions = function(options){
				options.hide();
			}

			var init = function(select){

				var id = randomString(15);

				var val = select.find('option:selected:first').text();
				if (typeof val === 'undefined' || val == ''){
					val = select.find('option:first').text();
				}

				//created select
				var c_select = '<a tabindex="'+~~(select.attr('tabindex'))+'" class="selectBox selectBox-dropdown '+select.attr('class')+'" id="'+id+'">' +
					'<span class="selectBox-label">'+ val +'</span>'+
					'<span class="selectBox-arrow"></span>'+
				'</a>';

				select.data('select-id', id);
				select.after(c_select).hide();

				//listeners
				select.off("selectBox-change").on("selectBox-change", function(event, selectedLi) {
					refresh($(this));
					var id = select.data("select-id");
					$("#opt-"+id).find('.selectBox-selected').removeClass("selectBox-selected");
					$(selectedLi).addClass("selectBox-selected");
					$("#"+id).find(".selectBox-label").text($(selectedLi).find('a').text());
					select.trigger("change");
					if($.browser.msie && parseInt($.browser.version, 10) == 7){
						var selectedValue = $(selectedLi).attr('data-val').substring(0,2);
						$(select).find("option[value='" + selectedValue + "']").trigger("focus");
					}
				});


				$("#"+id).on("click focus", function(event){
					currentOpenedSelect = select;
					event.preventDefault()
					if (event.type == 'mousedown'){
						$(this).focus();
						return false;
					}
					openOptions(select);
					var id = select.data("select-id");
					$(".selectBox.em3").removeClass("em3");
					if (!$("#"+id).hasClass("disabled")){
						$("#"+id).addClass("em3");
					}
					select.focus();
					return false;
				});

			}

			var refresh = function(select){
				var id = select.data("select-id");

				var el = $("#"+id).width(select.outerWidth()).attr("class","selectBox selectBox-dropdown")
					.addClass(select.attr('class')).attr('title', select.attr('title') || '')
					.attr('tabindex', ~~(select.attr('tabindex'))).css('display', 'inline-block');

				var val = select.find("option[value='"+select.val()+"']:first").text();
				if (val === ''){
					val = select.val();
				}

				el.find(".selectBox-label").text(val);
			}

			var destroy = function(select){
				var id = select.data("select-id");
				$("#"+id).remove();
				$("#opt-"+id).remove();
			}

			var setValues = function(select, data){
				select.val(data);
				destroy(select);
				init(select);
			}

			var handleKeyDown = function (event) {
				options = $(".selectBox-dropdown-menu:visible");
				if (options.length == 0) return true;

				var id = options.attr("id").replace('opt-','');
				var control = $("#"+id);
				var select = control.prev();
				if (control.hasClass('selectBox-disabled')) return true;


				switch (event.keyCode) {
                case 27:
                	event.preventDefault();
                	closeOptions(options);
                    break;
                case 9:
                case 13:

                	//PTR 06861172 [Medium]: WWW-JJWDS-PROD QA flying dropdown list back
                	if ($(".blockOverlay").length >= 1){
                		event.preventDefault();
                		return false;
                	}

                	$(".selectBox.em3").removeClass("em3");
                	var id = options.attr('id').replace('opt-','');

                	var nextTabIndex = event.shiftKey?~~$("#"+id).attr('tabindex') - 1:~~$("#"+id).attr('tabindex') + 1;
                	var selected = options.find(".selectBox-selected");
                	if (selected.length != 0){
                		selected.trigger('click');
                	}else{
                		closeOptions(options);
                	}

                	var next = $("[tabindex='"+nextTabIndex+"']:visible").not(".disabled, :disabled");
                	if (next.length > 1){
                		next.eq(1).focus();
                		return false;
                	}else if (next.length == 1){
                		next.eq(0).focus();
                		return false;
                	}else{
                		nextTabIndex++;
                		var stopWhile = false;
                		while(nextTabIndex != 500 && !stopWhile){
                			if(($("[tabindex='"+nextTabIndex+"']").length > 0 && $("[tabindex='"+nextTabIndex+"']").is(":visible")) || nextTabIndex == 500){
                				if(nextTabIndex == 500){ nextTabIndex = 1; } //reseting tabindex if finished
                				stopWhile = true;
                			} else {
                				nextTabIndex++;
                			}
                		}
                        $("[tabindex='"+nextTabIndex+"']:visible").not(".disabled, :disabled").focus();
                		return false;
                	}
                    break;
                case 38:
                case 37:
                    event.preventDefault();
                    var selected = options.find(".selectBox-selected");
                    if (selected.length == 0) selected = options.find('li:first');

                    var prev = selected.prev();
                    if (prev.length == 0){
                    	prev = options.find('li:last');
                    }
                    selected.removeClass("selectBox-selected");
                    prev.addClass("selectBox-selected");
                    keepOptionInView(currentOpenedSelect, prev);
                    break;
                case 40:
                case 39:
                    event.preventDefault();
                    var selected = options.find(".selectBox-selected");
                    if (selected.length == 0) selected = options.find('li:first');

                    var next = selected.next();
                    if (next.length == 0){
                    	next = options.find('li:first');
                    }
                    selected.removeClass("selectBox-selected");
                    next.addClass("selectBox-selected");
                    keepOptionInView(currentOpenedSelect, next);
                    break
                default:
					// Type to find
					//if (!control.hasClass('selectBox-menuShowing')) showMenu(select);
					event.preventDefault();
					clearTimeout(typeTimer);
					typeSearch += String.fromCharCode(event.charCode || event.keyCode);

					options.find('A').each(function() {
						if ($.trim($(this).text()).substr(0, typeSearch.length).toLowerCase() === typeSearch.toLowerCase()) {
							//addHover(select, $(this).parent());
							var selected = options.find(".selectBox-selected");
		                    if (selected.length == 0) selected = options.find('li:first');

		                    selected.removeClass("selectBox-selected");
		                    $(this).parent().addClass("selectBox-selected");

							keepOptionInView(select, $(this).parent());
							return false;
						}
					});

					// Clear after a brief pause
					typeTimer = setTimeout(function() {
						typeSearch = '';
					}, 500);
					break;
				}
				return false;
            };

			$(document).on("keydown", handleKeyDown);

			$(document).on('mousedown', function(event) {
				if ($(event.target).is(".selectBox-dropdown-menu") || $(event.target).parents(".selectBox-dropdown-menu").length > 0)
					return;
				$(".selectBox-dropdown-menu").hide();
				$(".selectBox.em3").removeClass("em3");
			});

			return function(action, data) {

				switch (action) {
					case 'control':
						 return $("#"+$(this).data("selectId"));
					break;
					case 'options':
						 return $("#opt-"+$(this).data("selectId"));
					break;
					case 'value':
		            	$(this).each(function () {
		            		setValues($(this), data);
		                });
		            	break;
		            case 'refresh':
		            	$(this).each(function () {
		            		refresh($(this));
		                });
		                break;
		            case 'destroy':
		            	$(this).each(function () {
		            		destroy($(this));
		                });
		            	break;
		            case 'generate':
		            	openOptions($(this));
		            	$(".selectBox-dropdown-menu").hide();
		            	break;
		            default:
		            	$(this).each(function () {
		            		init($(this));
		                });
		            	break;
	            }

	            return $(this);
			}
		})()
	});
})(jQuery);
